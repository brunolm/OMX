
if (!ManagerAddsSystem) var ManagerAddsSystem = {};
if (!ManagerAddsSystem.OrkutManager) ManagerAddsSystem.OrkutManager = {};

if (typeof (unsafeWindow) === "undefined")
    unsafeWindow = window;

unsafeWindow = unsafeWindow || window;

var $uniquejQuery = (function (window)
{
    ManagerAddsSystem.OrkutManager.LoadScript("chrome://orkutmanager/content/bin/jquery-1.7.1.min.js");
    return jQuery;
})(unsafeWindow);

jQuery.noConflict(true);
jQuery = $uniquejQuery;

var $ = function (selector, context)
{
    return new $uniquejQuery.fn.init(selector, context || unsafeWindow.document);
};

jQuery.extend($, jQuery);
$.debug = function (x, s)
{
    debugger;
    s || (s = "\n");
    var t = []; for (var i in x) t.push(i + "=" + x[i]);
    return t.join(s)
};
jQuery = $;
window.GPMA = {};
unsafeWindow.GPMAjQuery = $;

$.fn._attr = $.fn.attr;
$.fn.attr = function (n, v)
{
    try
{
        if (!v)
            return $(this)._attr(n);

        return $(this)._attr(n, v);
    }
    catch (ex) // firefox dumbass
    {
        var e = this[0];
        if (!v)
            return e.getAttribute(n);

        e.setAttribute(n, v);

        return $(e);
    }
};

//#region High performance functions
var $eid = function (id) { return window.document.getElementById(id); }
//#endregion

ManagerAddsSystem.OrkutManager.Utils = {};
ManagerAddsSystem.OrkutManager.Utils.AddToTree = function (combos, keys, def)
{
    for (var i = 0, length = keys.length; i < length; ++i) combos = combos[keys[i]] = i == length - 1 ? def : combos[keys[i]] || {};
};
$.fn.serializeObject = function ()
{
    var o = {};
    var a = this.serializeArray();

    var chk = $("input:checkbox", this).map(function ()
    {
        return { name: this.name, value: this.checked };
    });
    a = a.concat($.makeArray(chk));

    $.each(a, function ()
    {
        var obj = this;
        var ns = this.name.split(".");
        ManagerAddsSystem.OrkutManager.Utils.AddToTree(o, ns, this.value == "true" ? true : this.value);
    });
    return o;
};

ManagerAddsSystem.OrkutManager.Scripts = [];

ManagerAddsSystem.OrkutManager.LoadCallback = function () { };
ManagerAddsSystem.OrkutManager.AddLoad = function (key, cb)
{
    if (ManagerAddsSystem.OrkutManager.Scripts.indexOf(key) == -1)
{
        var prevLoader = ManagerAddsSystem.OrkutManager.LoadCallback;
        ManagerAddsSystem.OrkutManager.LoadCallback = function (a, b)
        {
            prevLoader(a, b);
            window.setTimeout(cb, 380);
        };
        ManagerAddsSystem.OrkutManager.Scripts.push(key);
    }
};

ManagerAddsSystem.OrkutManager.RefreshLoad = function ()
{
    ManagerAddsSystem.OrkutManager.PageLoadFlag = "refresh";
    window.setTimeout(ManagerAddsSystem.OrkutManager.RefreshLoad, (1000 * (60 * 2)));
};

ManagerAddsSystem.OrkutManager.PageLoadFlag = window.location.href;
ManagerAddsSystem.OrkutManager.CheckPageLoad = function ()
{
    if (ManagerAddsSystem.OrkutManager.PageLoadFlag != window.location.href)
{
        ManagerAddsSystem.OrkutManager.PageLoadFlag = window.location.href;
        ManagerAddsSystem.OrkutManager.LoadCallback();
    }

    window.setTimeout(ManagerAddsSystem.OrkutManager.CheckPageLoad, 350);
};
ManagerAddsSystem.OrkutManager.CheckPageLoad();


ManagerAddsSystem.OrkutManager.EnsureElement = function (sel, callback)
{
    if ($(sel).length == 0)
{
        callback();
        window.setTimeout(function () { ManagerAddsSystem.OrkutManager.EnsureElement(sel, callback) }, 500);
    }
    else
{
        window.setTimeout(function () { ManagerAddsSystem.OrkutManager.EnsureElement(sel, callback) }, 1500);
    }
};
ManagerAddsSystem.OrkutManager.EnsureRemove = function (sel)
{
    $(sel).remove();
    window.setTimeout(function () { ManagerAddsSystem.OrkutManager.EnsureRemove(sel) }, 500);
};


ManagerAddsSystem.OrkutManager.SetSetting = function (key, val)
{
    /// <summary>
    /// Set addon setting key in the settings object and saves
    /// </summary>
    /// <param name="key">string object settings key</param>
    /// <param name="val">object setting</param>
    if ($.browser.mozilla)
{
        ManagerAddsSystem.OrkutManager.UserSettingsObject[key] = val;

        ManagerAddsSystem.OrkutManager.PrefManager.Set("UserSettings",
            JSON.stringify(ManagerAddsSystem.OrkutManager.UserSettingsObject));
    }
    else
{
        ManagerAddsSystem.OrkutManager.UserSettingsObject[key] = val;
        chrome.extension.sendRequest({
            Command: "SetSettings",
            Settings: JSON.stringify(ManagerAddsSystem.OrkutManager.UserSettingsObject)
        },
            function (response)
{
            });
    }
};
ManagerAddsSystem.OrkutManager.PushSetting = function (key, val)
{
    var s = ManagerAddsSystem.OrkutManager.UserSettingsObject[key] || [];
    s.push(val);
    ManagerAddsSystem.OrkutManager.UserSettingsObject[key] = s;
    ManagerAddsSystem.OrkutManager.SetSettings(ManagerAddsSystem.OrkutManager.UserSettingsObject);
};
ManagerAddsSystem.OrkutManager.PushUniqueSetting = function (key, val, comparer)
{
    /// <summary>
    /// Push a value or update in the settings object
    /// </summary>
    /// <param name="key">array settings</param>
    /// <param name="val">object setting</param>
    /// <param name="comparer">function to determine if object is unique in the collection</param>
    var s = ManagerAddsSystem.OrkutManager.UserSettingsObject[key] || [];

    comparer = comparer || (function (e) { return e == val });

    var item;
    if ((item = s.filter(comparer)).length)
    {
        s.splice(s.indexOf(item[0]));
    }

    s.push(val);

    ManagerAddsSystem.OrkutManager.UserSettingsObject[key] = s;
    ManagerAddsSystem.OrkutManager.SetSettings(ManagerAddsSystem.OrkutManager.UserSettingsObject);
};

ManagerAddsSystem.OrkutManager.SetSettings = function (val)
{
    /// <summary>
    /// Set addon settings object and saves
    /// </summary>
    /// <param name="val">object settings</param>
    if ($.browser.mozilla)
{
        ManagerAddsSystem.OrkutManager.UserSettingsObject = val;

        ManagerAddsSystem.OrkutManager.PrefManager.Set("UserSettings", JSON.stringify(val));
    }
    else
{
        ManagerAddsSystem.OrkutManager.UserSettingsObject = val;
        chrome.extension.sendRequest({ Command: "SetSettings", Settings: JSON.stringify(val) }
            , function (response)
{

            });
    }
};


ManagerAddsSystem.OrkutManager.GetExtDetails = function (fn)
{
    if ($.browser.mozilla)
{
        Components.utils.import("resource://gre/modules/AddonManager.jsm");
        AddonManager.getAddonByID("{00c1a78c-a065-48bd-a294-f016d0a68f6f}", function (addon)
        {
            fn(addon);
        });
    }
    else
{
        chrome.extension.sendRequest({ Command: "GetDetails" },
            function (response)
{
                var details = response.Details;
                console.log(details);
                fn(details);
            });
    }
};

ManagerAddsSystem.OrkutManager.GetLatestVersionInfo = function (fn)
{
    if ($.browser.mozilla)
{
        $.ajax
        ({
            url: "http://www.manageraddons.info/dl/firefox/omx/update.rdf",
            dataType: "xml",
            success: function (data)
            {
                var info = {};

                info.Version = $(data).find("*").filter(function (i, el)
                {
                    return el.getAttribute("em:version");
                }).get(0).getAttribute("em:version");

                var urlElement = $(data).find("*").filter(function (i, el)
                {
                    return el.getAttribute("em:updateLink");
                }).get(0);

                info.Url = urlElement.getAttribute("em:updateLink");
                info.UpdateHash = urlElement.getAttribute("em:updateHash");
                info.UpdateInfo = urlElement.getAttribute("em:updateInfoURL");

                fn(info);
            }
        });

    }
    else
{
        chrome.extension.sendRequest({ Command: "GetLatestVersionInfo" },
            function (response)
{
                fn(response);
            });
    }
};



ManagerAddsSystem.OrkutManager.ParseTextTemplate =
    function (text, userName, userLink, userImage, userID, time, content, topicUrl, postUrl, currentDate, subject)
    {
        text = text.replace(/\{UserImage(?:\|(?:(\d+)x(\d+)))?\}/i, function (m, w, h)
        {
            if (userImage)
            {
                var im = $(userImage);

                if (w)
                    im.attr("width", w)
                if (h)
                    im.attr("height", h)

                return im.wrap("<div>").parent().html();
            }

            return "";
        });

        text = text
            .replace(/\{UserName\}/ig, userName)
            .replace(/\{UserLink\}/ig, userLink)
            .replace(/\{UserImageFull\}/ig, userImage.replace(/small/i, "medium"))
            .replace(/\{UserID\}/ig, userID)
            .replace(/\{Time\}/ig, time)
            .replace(/\{Content\}/ig, content)
            .replace(/\{TopicURL\}/ig, topicUrl)
            .replace(/\{PostURL\}/ig, postUrl)
            .replace(/\{CurrentDate\}/ig, currentDate)
            .replace(/\{Subject\}/ig, subject)
        ;

        return text;
    };



///
ManagerAddsSystem.OrkutManager.Languages = {};
///

/// <summary>
/// Framework methods and events
/// </summary>

//#region Framework Methods
ManagerAddsSystem.OrkutManager.StringHelper = {};
ManagerAddsSystem.OrkutManager.StringHelper.PadLeft = function (val, len, padChar)
{
    val = String(val);
    len = len || 2;
    padChar = padChar || "0";
    while (val.length < len) val = padChar + val;
    return val;
};
ManagerAddsSystem.OrkutManager.DateHelper = {};
ManagerAddsSystem.OrkutManager.DateHelper.Format = function (date, format, utc)
{
    try
{
        var _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            M = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            m = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            f = date[_ + "Milliseconds"](),
            t = date[_ + "Hours"]() > 12,
            z = utc ? 0 : date.getTimezoneOffset(),
            flags =
            {
                d: d,
                dd: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(d, 2, "0"),
                ddd: D,
                dddd: D,
                M: M + 1,
                MM: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(M + 1, 2, "0"),
                MMM: M + 1,
                MMMM: M + 1,
                yy: String(y).slice(2),
                yyyy: y,
                h: H % 12 || 12,
                hh: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft((H % 12 || 12), 2, "0"),
                H: H,
                HH: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(H, 2, "0"),
                m: m,
                mm: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(m, 2, "0"),
                s: s,
                ss: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(s, 2, "0"),
                f: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(f, 3, "0"),
                F: ManagerAddsSystem.OrkutManager.StringHelper.PadLeft(f > 99 ? Math.round(f / 10) : f),
                t: H < 12 ? "a" : "p",
                tt: H < 12 ? "am" : "pm",
                T: H < 12 ? "A" : "P",
                TT: H < 12 ? "AM" : "PM"
            };

        return format.replace(/yy(?:yy)?|MM(?:M?M)?|dd(?:d?d)?|HH?|hh?|mm?|s?|ff?f?|tt/g, function ($0)
        {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    }
    catch (ex)
    {
    }

    return date.toString();
};


ManagerAddsSystem.OrkutManager.ShortenUrl = function (url, callback)
{
    $.post("http://www.orkutmanager.net/utils/", { LongUrl: url, script: true },
        function (result)
{
            callback(result);
        });
};
//#endregion

//#region Framework Events
$(".manager-shorturl").live("click", function (ev)
{
    ev.preventDefault();
    var url = unsafeWindow.prompt("LongUrl", window.location.href);
    ManagerAddsSystem.OrkutManager.ShortenUrl(url, function (result)
    {
        unsafeWindow.prompt("ShortUrl", result.shortUrl);
    });
});
$(".manager-feedback").live("click", function (ev)
{
    ev.preventDefault();
    window.open("http://www.orkut.com.br/Main#Community?cmm=90840394");
});

$(".manager-tab-link a").live("click", function (ev)
{
    $.makeArray(this.parentNode.querySelectorAll(".manager-selected")).forEach(function (el)
    {
        el.className = el.className.replace(/manager-selected/ig, "");
    });
    $(this).addClass("manager-selected");

    var index = $(this).index();
    var contents = $(this).parent().parent().get(0).querySelectorAll(".manager-tab-content");
    var content;

    $.makeArray(contents).forEach(function (el, i)
    {
        el.style.display = "none";

        if (index == i)
            content = el;
    });

    content.style.display = "block";
});

//#endregion

$(window.document).unload(function () { $("*").unbind().die() });

/// <summary>
/// Framework tests (remove before deploy)
/// </summary>